import { app, BrowserWindow,session, BrowserWindowConstructorOptions as WindowOptions, } from 'electron';
import { ipcRenderer } from './nub/ipc/renderer';
import { createFileRoute, createURLRoute } from 'electron-router-dom';

import { join } from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}



const createWindow = (windowName: string): void => {
  // Create the browser window.
  const icon = __dirname+"\\..\\..\\src\\asset\\img\\phoenix.png"; 
  // console.log("icon path is:",icon);
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    icon:icon,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegrationInWorker: true,
      contextIsolation: true,
    },
    autoHideMenuBar: true,
  });

  // and load the index.html of the app.
  mainWindow.maximize();
  // const id:string = "main_window";
  // const devServerURL = createURLRoute(MAIN_WINDOW_WEBPACK_ENTRY, windowName)

  // const fileRoute = createFileRoute(
  //   join(__dirname, './../index.js'),windowName
  // )

  // process.env.NODE_ENV === 'development'
  console.log('env',process.env.NODE_ENV);
  
  mainWindow.loadURL(createURLRoute(MAIN_WINDOW_WEBPACK_ENTRY,windowName));
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          'default-src \'self\' \'unsafe-eval\' \'unsafe-inline\'; img-src * https://avatars.githubusercontent.com'
        ]
      }
    })
  })

  ipcRenderer.init(mainWindow);
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(()=>{
  createWindow("main");
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow("main");
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
